apply plugin: "com.android.library"
apply plugin: "kotlin-android"
apply plugin: "kotlin-android-extensions"
apply plugin: "com.github.dcendents.android-maven"
apply plugin: "org.jetbrains.dokka-android"

android {
    compileSdkVersion Versions.compileSdk
    buildToolsVersion Versions.buildTools

    defaultConfig {
        minSdkVersion Versions.minSdk
        targetSdkVersion Versions.compileSdk
        versionCode Versions.kandyCode
        versionName Versions.kandy

        consumerProguardFile("consumer-rules.pro")
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
    }
}

dependencies {
    // Kotlin
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${Versions.kotlin}"
}

repositories {
    mavenCentral()
}

dokka {
    outputFormat = "javadoc"
    outputDirectory = "$buildDir/javadoc"
}

task generateSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier = "sources"
}

task generateJavadocsJar(type: Jar) {
    from tasks.dokka
    archiveClassifier = "javadoc"
}

publishing {
    publications {
        def moduleName = project.name
        def libraryName = moduleName.substring(Publishing.artifactPrefix.length())

        def module = Module.Companion.byId(libraryName)
        def hasDebugVariant = module.hasDebugVariant
        for(def i = 0; i < (hasDebugVariant ? 2 : 1); ++i) {
            def variant = hasDebugVariant && i == 1 ? "debug" : "release"
            def variantSuffix = !hasDebugVariant ? "" : "-$variant"
            "$moduleName$variantSuffix"(MavenPublication) {
                artifactId = "$libraryName$variantSuffix"
                artifact("$buildDir/outputs/aar/$moduleName-${variant}.aar")
                artifact generateSourcesJar
                artifact generateJavadocsJar
                pom.withXml {
                    def dependenciesNode = asNode().getAt("dependencies")[0]
                            ?: asNode().appendNode("dependencies")
                    configurations.implementation.allDependencies.each {
                        if (it.name != "unspecified") {
                            def dependencyNode = dependenciesNode.appendNode("dependency")
                            dependencyNode.appendNode("groupId", it.group)
                            dependencyNode.appendNode("artifactId", it.name)
                            dependencyNode.appendNode("version", it.version)
                        }
                    }
                }
            }
        }
    }
}

bintray {
    def moduleName = this.project.name

    def packageName = moduleName.substring(Publishing.artifactPrefix.length())

    user = System.getenv("BINTRAY_KWEZAL_USER")
    key = System.getenv("BINTRAY_KWEZAL_KEY")

    println("Bintray: package name = $packageName")

    def module = Module.Companion.byId(packageName)
    publications = module.hasDebugVariant ? ["$moduleName-debug", "$moduleName-release"] : [moduleName]

    pkg {
        repo = Publishing.repoName
        name = packageName
        userOrg = Publishing.organizationName
        licenses = ["Apache-2.0"]
        vcsUrl = "${Publishing.github}.git"
        websiteUrl = Publishing.github
        issueTrackerUrl = "${Publishing.github}/issues"

        version {
            name = Versions.kandy
            desc = "Kandy ${Versions.kandy}"
            released = new Date()
            vcsTag = ""
        }
    }
}